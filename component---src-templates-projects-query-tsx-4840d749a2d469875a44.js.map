{"version":3,"sources":["webpack:///./src/components/projects-page.tsx","webpack:///./src/templates/projects-query.tsx","webpack:///./node_modules/@lekoarts/gatsby-theme-emma/src/components/project-item.tsx","webpack:///./src/components/projects.tsx"],"names":["ProjectsPage","projects","sx","EmmaCoreProjects","props","allProject","data","console","log","nodes","ProjectItem","node","style","div","position","content","display","paddingTop","left","height","top","width","a","color","opacity","padding","zIndex","transition","textDecoration","fluid","cover","childImageSharp","to","slug","aria-label","title","alt","src","tracedSVG","right","bottom","filter","objectFit","backgroundColor","fontSize","fontWeight","client","service","isBrowser","window","categories","label","href","id","Projects","hash","location","slice","defaultCategory","find","category","useState","selected","setSelected","project","toLowerCase","trail","useTrail","length","from","Fragment","as","variant","textAlign","data-testid","mt","mx","map","key","onClick","e","preventDefault","onCategoryClick","gridTemplateColumns","justifyContent","maxWidth","index"],"mappings":"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","file":"component---src-templates-projects-query-tsx-4840d749a2d469875a44.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Container, Styled } from \"theme-ui\"\nimport { useTrail } from \"react-spring\"\nimport Layout from \"@lekoarts/gatsby-theme-emma/src/components/layout\"\nimport { ChildImageSharp } from \"@lekoarts/gatsby-theme-emma/src/types\"\nimport Projects from \"./projects\"\n\ntype ProjectsProps = {\n    projects: {\n        color: string\n        slug: string\n        title: string\n        service: string\n        client: string\n        category: string\n        cover: ChildImageSharp\n    }[]\n    [key: string]: any\n}\n\nconst ProjectsPage = ({ projects }: ProjectsProps) => {\n    return (\n        <Layout\n            sx={{\n            }}\n        >\n            <Projects projects={projects}/>\n        </Layout>\n    )\n}\n\nexport default ProjectsPage","import { graphql } from \"gatsby\"\nimport ProjectsComponent from \"../components/projects-page\"\n\nexport default function EmmaCoreProjects({ ...props }: Props) {\n    const {\n            data: { allProject },\n    } = props\n\n    console.log(props)\n\n    return <ProjectsComponent projects={allProject.nodes} {...props} />\n}\n\nexport const query = graphql`\n  query {\n    allProject: allPortfolioProject(sort: { fields: date, order: DESC }) {\n      nodes {\n        color\n        slug\n        service\n        client\n        title\n        category\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 850, quality: 90, traceSVG: { color: \"#e6e6e6\" }) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { animated } from \"react-spring\"\nimport { ChildImageSharp } from \"../types\"\n\ntype ProjectItemProps = {\n  node: {\n    color: string\n    title: string\n    slug: string\n    service: string\n    client: string\n    cover: ChildImageSharp\n  }\n  style: any\n}\n\nconst ProjectItem = ({ node, style }: ProjectItemProps) => (\n  <animated.div\n    sx={{\n      position: `relative`,\n      \"&:before\": {\n        content: `\"\"`,\n        display: `block`,\n        paddingTop: `100%`,\n      },\n    }}\n    style={style}\n  >\n    <div\n      sx={{\n        left: 0,\n        height: `100%`,\n        position: `absolute`,\n        top: 0,\n        width: `100%`,\n        a: {\n          color: `white`,\n          height: `100%`,\n          left: 0,\n          opacity: 0,\n          padding: 4,\n          position: `absolute`,\n          top: 0,\n          width: `100%`,\n          zIndex: 10,\n          transition: `all 0.3s ease-in-out`,\n          textDecoration: `none`,\n          \"&:hover\": {\n            color: `white`,\n            opacity: 1,\n            textDecoration: `none`,\n          },\n        },\n      }}\n    >\n      <div\n        sx={{\n          \"> div\": {\n            height: `100%`,\n            left: 0,\n            position: `absolute !important`,\n            top: 0,\n            width: `100%`,\n            \"> div\": {\n              position: `static !important`,\n            },\n          },\n        }}\n      >\n        <Img fluid={node.cover.childImageSharp.fluid} />\n      </div>\n      <Link to={node.slug} aria-label={`View detail page of ${node.title}`}>\n        <img\n          alt=\"\"\n          src={node.cover.childImageSharp.fluid.tracedSVG}\n          sx={{\n            position: `absolute`,\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            width: `100%`,\n            height: `100%`,\n            filter: `invert(100%)`,\n            zIndex: -1,\n            opacity: 0.08,\n            objectFit: `cover`,\n          }}\n        />\n        <div\n          sx={{\n            backgroundColor: node.color,\n            height: `100%`,\n            left: 0,\n            position: `absolute`,\n            top: 0,\n            width: `100%`,\n            zIndex: -2,\n          }}\n        />\n        <div sx={{ fontSize: 5, fontWeight: `bold` }}>{node.client}</div>\n        <div sx={{ fontSize: 2 }}>{node.service}</div>\n      </Link>\n    </div>\n  </animated.div>\n)\n\nexport default ProjectItem\n","/** @jsx jsx */\nimport React, { useState } from \"react\"\nimport { ChildImageSharp } from \"@lekoarts/gatsby-theme-emma/src/types\"\nimport { useTrail } from \"react-spring\"\nimport { jsx, Heading, Container, Link } from \"theme-ui\"\nimport ProjectItem from \"@lekoarts/gatsby-theme-emma/src/components/project-item\"\n\nconst isBrowser = typeof window !== \"undefined\"\n\ntype ProjectsProps = {\n    projects: {\n        color: string\n        slug: string\n        title: string\n        service: string\n        client: string\n        category: string\n        cover: ChildImageSharp\n    }[]\n    [key: string]: any\n}\n\nconst categories = [{\n    label: \"All Categories\",\n    content: \"All\",\n    href: \"/portfolio#all\",\n    id: \"all\"\n}, {\n    label: \"Game Development\",\n    content: \"Game Development\",\n    href: \"/portfolio#gamedev\",\n    id: \"gamedev\"\n}, {\n    label: \"Modding\",\n    content: \"Modding\",\n    href: \"/portfolio#modding\",\n    id: \"modding\"\n}, {\n    label: \"Open Source Software\",\n    content: \"OSS\",\n    href: \"/portfolio#oss\",\n    id: \"oss\"\n}]\n\nconst Projects = ({ projects }: ProjectsProps) => {\n    const hash = isBrowser ? location.hash.slice(1) : \"\"\n    const defaultCategory = categories.find(category => hash === category.id)\n    const [selected, setSelected] = useState(defaultCategory ? defaultCategory.id : \"gamedev\");\n\n    if (selected !== \"all\") {\n        projects = projects.filter(project => project.category.toLowerCase() === selected)\n    }\n\n    const trail = useTrail(projects.length, {\n        from: { height: `0%` },\n        to: { height: `100%` },\n    })\n\n    const onCategoryClick = (e, id) => {\n        setSelected(id)\n        e.preventDefault()\n    }\n\n    return (\n        <React.Fragment>\n            <Container>\n                <Heading as=\"h1\" variant=\"styles.h1\" sx={{ textAlign: 'center' }}>\n                    Projects\n                </Heading>\n\n                <div data-testid=\"projects-categories\" sx={{ mt: 4, a: { mx: 2 }, textAlign: 'center' }}>\n                    {categories.map((category) => (\n                        <Link\n                            key={category.id}\n                            aria-label={category.label}\n                            title={category.label}\n                            href={category.href}\n                            onClick={(e) => onCategoryClick(e, category.id)}\n                            sx={{ \n                                color: \"primary\",\n                                fontWeight: category.id === selected ? 700 : \"normal\"\n                            }}\n                        >\n                            {category.content}\n                        </Link>\n                    ))}\n                </div>\n            </Container>\n\n            <Container\n                sx={{\n                    display: `grid`,\n                    gridTemplateColumns: `repeat(auto-fit, minmax(280px, 20%))`,\n                    justifyContent: `center`,\n                    width: `100%`,\n                    maxWidth: `100%`,\n                    padding: `2rem 0`\n\n                }}\n            >\n                {trail.map((style, index) => (\n                    <ProjectItem style={style} node={projects[index]} key={projects[index].slug} />\n                ))}\n            </Container>\n        </React.Fragment>\n    )\n}\n\nexport default Projects"],"sourceRoot":""}