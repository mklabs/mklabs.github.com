{"version":3,"sources":["webpack://gas-companion-docs/./src/components/table-params-row.js","webpack://gas-companion-docs/./src/components/table-params.js","webpack://gas-companion-docs/./src/templates/api-template.js","webpack://gas-companion-docs/./src/components/api-docs.js"],"names":["item","key","name","children","find","child","content","type","desc","css","node","params","xml","toLowerCase","xmlChildren","filter","xmlChild","isExec","isTarget","findParams","length","map","i","data","pageContext","title","classParent","description","slug","members","edges","images","headings","depth","value","findImage","relativePath","replace","dirname","img","parent","console","log","fixed","SEO","image","Layout","disableTableOfContents","id","slugify","findXML","Link","to"],"mappings":"0bAqBA,EAlBuB,SAAC,GAAmB,IAAjBA,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACtBC,EAAOF,EAAKG,SAASC,MAAK,SAAAC,GAAK,MAAmB,SAAfA,EAAMH,QAAiBI,QAC1DC,EAAOP,EAAKG,SAASC,MAAK,SAAAC,GAAK,MAAmB,SAAfA,EAAMH,QAAiBI,QAC1DE,EAAOR,EAAKG,SAASC,MAAK,SAAAC,GAAK,MAAmB,gBAAfA,EAAMH,QAAwBI,QAEvE,OACI,cAAIL,IAAKA,IACL,mBACI,aAAGQ,IAAG,GAA0CP,IAChD,aAAGO,IAAG,GAA+DF,KAEzE,cAAIE,IAAG,GACFD,KCoBjB,EAhCoB,SAAC,GAAoB,IAAlBE,EAAiB,EAAjBA,KAAMH,EAAW,EAAXA,KAanBI,EAXa,SAACD,GAIhB,OAHeA,EAAKE,IAAIR,MAAK,SAAAJ,GAAI,OAAIA,EAAKE,OAASK,EAAKM,iBAClDC,YAEaC,QAAO,SAAAC,GACtB,IAAMC,EAASD,EAASb,SAASC,MAAK,SAAAC,GAAK,MAAmB,SAAfA,EAAMH,MAAqC,SAAlBG,EAAMC,WACxEY,EAAWF,EAASb,SAASC,MAAK,SAAAC,GAAK,MAAmB,SAAfA,EAAMH,MAAqC,WAAlBG,EAAMC,WAChF,OAAQW,IAAWC,KAIZC,CAAWT,GAC1B,OAAKC,EAAOS,QAKR,yBACI,kBAAKb,IACL,sBACI,qBACKI,EAAOU,KAAI,SAACrB,EAAMsB,GAAP,OACR,QAAC,EAAD,CAAgBtB,KAAMA,EAAMC,IAAKqB,UAT1C,M,kICff,ECWa,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACZC,EAAK,GAAMD,EAAYE,YACvBC,EAAW,mCAAsCH,EAAYE,YAC7DE,EAAOJ,EAAYI,KAGnBC,EAAUN,EAAKM,QAAQC,MACvBC,EAASR,EAAKQ,OAAOD,MAErBE,EAAWH,EAAQR,KAAI,kBAAe,CACxCY,MAAO,EACPC,MAFyB,EAAGxB,KAEhBR,SAOViC,EAAY,SAACzB,GACf,IACM0B,EADU1B,EAAKE,IAAIR,MAAK,SAAAJ,GAAI,MAAkB,YAAdA,EAAKE,QACdI,QAAQ+B,QAAQ,QAAS3B,EAAK4B,SACrDC,EAAMR,EAAO3B,MAAK,qBAAGM,KAAgB8B,OAAOJ,eAAiBA,KAEnE,GADKG,GAAKE,QAAQC,IAAIhC,EAAMqB,EAAQK,GAC/BG,EAIL,OAAOA,EAAI7B,KAAKiC,OAGpB,OACI,yBACI,QAACC,EAAA,EAAD,CAAKnB,MAAOA,EAAOE,YAAaA,EAAaC,KAAMA,EAAMiB,MA5BnD,MA6BN,QAACC,EAAA,EAAD,CACIC,wBAAwB,EACxBtB,MAAOA,EACPO,SAAUA,GAGTH,EAAQR,KAAI,gBAAGX,EAAH,EAAGA,KAAH,OACT,eAAKT,IAAKS,EAAKR,OACX,eAAKO,IAAG,IACJ,cAAIuC,IAAIC,OAAQvC,EAAKR,OAAQQ,EAAKR,OAClC,iBA7BR,SAACQ,EAAMR,GACnB,OAAOQ,EAAKE,IAAIR,MAAK,SAAAJ,GAAI,OAAIA,EAAKE,OAASA,KA6BlBgD,CAAQxC,EAAD,eAAsBJ,UAGlC,QAAC,IAAD,CAAOqC,MAAOR,EAAUzB,MAExB,QAAC,EAAD,CAAaA,KAAMA,EAAMH,KAAK,YAE9B,QAAC,EAAD,CAAaG,KAAMA,EAAMH,KAAK,cAGlC,wBAIR,aAAGE,IAAG,GAAN,0CAC0C,QAAC,EAAA0C,KAAD,CAAMC,GAAG,4CAAT","file":"component---src-templates-api-template-js-1322f2ab1dfcff3b62ec.js","sourcesContent":["import { css } from '@emotion/react';\r\nimport React from \"react\"\r\n\r\nconst TableParamsRow = ({ item, key }) => {\r\n    const name = item.children.find(child => child.name === \"name\").content\r\n    const type = item.children.find(child => child.name === \"type\").content\r\n    const desc = item.children.find(child => child.name === \"description\").content\r\n\r\n    return (\r\n        <tr key={key}>\r\n            <td>\r\n                <p css={css`color: #ACA599; margin-bottom: 0`}>{name}</p>\r\n                <p css={css`font-size: 14px; margin-bottom: 0; font-style: italic`}>{type}</p>\r\n            </td>\r\n            <td css={css`vertical-align: baseline`}>\r\n                {desc}\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableParamsRow","import React from \"react\"\r\nimport TableParamsRow from \"./table-params-row\"\r\n\r\nconst TableParams = ({ node, type }) => {\r\n    // Filter out unwanted inputs (such as Exec and Target)\r\n    const findParams = (node) => {\r\n        const inputs = node.xml.find(item => item.name === type.toLowerCase())\r\n        let { xmlChildren } = inputs;\r\n\r\n        return xmlChildren.filter(xmlChild => {\r\n            const isExec = xmlChild.children.find(child => child.name === \"type\" && child.content === \"Exec\");\r\n            const isTarget = xmlChild.children.find(child => child.name === \"name\" && child.content === \"Target\");\r\n            return !isExec && !isTarget;\r\n        })\r\n    }\r\n\r\n    const params = findParams(node)\r\n    if (!params.length) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>{type}</h3>\r\n            <table>\r\n                <tbody>\r\n                    {params.map((item, i) => (\r\n                        <TableParamsRow item={item} key={i} />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TableParams","import { graphql } from 'gatsby';\r\nimport ApiDocsComponent from '../components/api-docs';\r\n\r\nexport default ApiDocsComponent;\r\n\r\nexport const query = graphql`\r\n  query($directory: String!, $classParent: String!) {\r\n    files: allFile(filter: {extension: {eq: \"xml\"}, relativeDirectory: { eq: $directory }}) {\r\n      edges {\r\n        node {\r\n          name\r\n          extension\r\n          relativePath\r\n          relativeDirectory\r\n        }\r\n      }\r\n    }\r\n\r\n    members: allApiDocsNode(filter: {classParent: {eq: $classParent }}) {\r\n      edges {\r\n        node {\r\n          name\r\n          type\r\n          relativeDirectory\r\n          basename\r\n          classParent\r\n          dirname\r\n          xml {\r\n            name\r\n            content\r\n            xmlChildren {\r\n              name\r\n              children {\r\n                name\r\n                content\r\n              }\r\n              content\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    images: allImageSharp {\r\n      edges {\r\n        node {\r\n          original {\r\n            width\r\n            height\r\n            src\r\n          }\r\n          parent {\r\n            ... on File {\r\n              name\r\n              relativePath\r\n              relativeDirectory\r\n            }\r\n          }\r\n\r\n          fixed(width: 750) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;","// import React from 'react';\r\n// export default ({ data }) => <pre>{JSON.stringify(data, null, 2)}</pre>;\r\n\r\nimport React from 'react';\r\nimport { css } from '@emotion/react';\r\n\r\nimport Layout from '@mklabs/gatsby-theme-docs/src/components/Layout';\r\nimport SEO from '@mklabs/gatsby-theme-docs/src/components/SEO';\r\nimport slugify from '@mklabs/gatsby-theme-docs/src/util/slug';\r\nimport Image from \"./image\"\r\nimport { Link } from \"gatsby\"\r\nimport TableParams from './table-params';\r\n\r\n\r\nconst Docs = ({ data, pageContext }) => {\r\n    const title = `${pageContext.classParent}`\r\n    const description = `Generated API documentation for ${pageContext.classParent}`\r\n    const slug = pageContext.slug\r\n    const image = \"\"\r\n\r\n    const members = data.members.edges\r\n    const images = data.images.edges\r\n\r\n    const headings = members.map(({ node }) => ({\r\n        depth: 2,\r\n        value: node.name\r\n    }))\r\n\r\n    const findXML = (node, name) => {\r\n        return node.xml.find(item => item.name === name)\r\n    }\r\n\r\n    const findImage = (node) => {\r\n        const imgNode = node.xml.find(item => item.name === \"imgpath\");\r\n        const relativePath = imgNode.content.replace(/^\\.\\./, node.dirname)\r\n        const img = images.find(({ node }) => node.parent.relativePath === relativePath)\r\n        if (!img) console.log(node, images, relativePath)\r\n        if (!img) {\r\n            // TODO: for unkwnon reason, Set{Health, Stamina, Mana}Percentage images are not generated by KantanDoc\r\n            return undefined;\r\n        }\r\n        return img.node.fixed;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SEO title={title} description={description} slug={slug} image={image} />\r\n            <Layout\r\n                disableTableOfContents={false}\r\n                title={title}\r\n                headings={headings}\r\n            >\r\n\r\n                {members.map(({ node }) => (\r\n                    <div key={node.name}>\r\n                        <div css={css`padding-bottom: 24px;`}>\r\n                            <h2 id={slugify(node.name)}>{node.name}</h2>\r\n                            <p>\r\n                                {findXML(node, `description`).content}\r\n                            </p>\r\n\r\n                            <Image fixed={findImage(node)} />\r\n\r\n                            <TableParams node={node} type=\"Inputs\" />\r\n\r\n                            <TableParams node={node} type=\"Outputs\" />\r\n                        </div>\r\n\r\n                        <hr />\r\n                    </div>\r\n                ))}\r\n\r\n                <p css={css`margin: 48px 0; text-align: center; font-style: italic`}>\r\n                    API documentation generated thanks to <Link to=\"http://kantandev.com/free/kantan-doc-gen\">Kantan Doc Gen</Link>\r\n                </p>\r\n\r\n            </Layout>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Docs"],"sourceRoot":""}