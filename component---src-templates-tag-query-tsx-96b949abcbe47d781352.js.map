{"version":3,"sources":["webpack://mklabs.github.io/./src/components/item-tags.tsx","webpack://mklabs.github.io/./src/components/blog-list-item.tsx","webpack://mklabs.github.io/./src/components/listing.tsx","webpack://mklabs.github.io/./src/components/tag.tsx","webpack://mklabs.github.io/./src/templates/tag-query.tsx","webpack://mklabs.github.io/./src/utils/replaceSlashes.ts"],"names":["tags","useMinimalBlogConfig","tagsPath","basePath","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","post","showTags","postsPrefix","mb","sx","fontSize","color","title","mt","a","date","posts","className","pageContext","alignItems","justifyContent","flexFlow","variant","marginY","TagComponentQuery","props","allPost","data","nodes","input","replace"],"mappings":"8LA8BA,IAjBiB,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,KAAsB,GACTC,SAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,QAAC,WAAD,KACGH,EAAKI,KAAI,SAACC,EAAKC,GAAN,OACR,QAAC,WAAD,CAAgBC,IAAKF,EAAIG,QACpBF,GAAF,MACD,QAAC,KAAD,CAAOG,GAAIC,OAAMC,IAAIC,OAAe,IAAIT,EAAL,IAAiBD,EAAjB,IAA6BG,EAAIG,OACjEH,EAAIQ,a,mJC0BjB,G,SAvBqB,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAA+C,IAAzCC,gBAAyC,YAEnCd,SAA1Be,EAF6D,EAE7DA,YAAab,EAFgD,EAEhDA,SAGnB,OACI,QAAC,KAAD,CAAKc,GAAI,IACL,QAAC,KAAD,CAAOR,GAAIC,OAAMC,IAAIC,OAAe,IAAIT,EAAL,IAAiBa,EAAjB,IAAgCF,EAAKN,MAASU,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAM,SAC7GN,EAAKO,QAEV,aAAGH,GAAI,CAAEE,MAAM,YAAcE,GAAI,EAAGC,EAAG,CAAEH,MAAM,WAAcD,SAAU,CAAC,EAAG,EAAG,MAC1E,oBAAOL,EAAKU,MACXV,EAAKd,MAAQe,IACV,QAAC,WAAD,YAEI,QAAC,IAAD,CAAUf,KAAMc,EAAKd,YCX7C,EARgB,SAAC,GAAD,IAAGyB,EAAH,EAAGA,MAAH,IAAUC,iBAAV,eAA0BX,gBAA1B,gBACd,mBAASW,UAAWA,GACjBD,EAAMrB,KAAI,SAACU,GAAD,OACT,QAAC,EAAD,CAAcP,IAAKO,EAAKN,KAAMM,KAAMA,EAAMC,SAAUA,U,iMCkC1D,EA3BY,SAAC,GAAsC,IAApCU,EAAmC,EAAnCA,MAAOE,EAA4B,EAA5BA,YAA4B,GACf1B,SAAvBC,EADsC,EACtCA,SAAUC,EAD4B,EAC5BA,SAElB,OACI,QAAC,IAAD,MACI,QAAC,IAAD,CAAKkB,MAAK,QAAUM,EAAYd,QAChC,QAAC,KAAD,MAEI,QAAC,KAAD,CAAMK,GAAI,CAAEU,WAAW,SAAWC,eAAe,gBAAkBC,SAAS,UACxE,QAAC,KAAD,CAASrB,GAAG,KAAKsB,QAAQ,YAAYb,GAAI,CAAEc,QAAS,IAC/CL,EAAYd,OAEjB,QAAC,KAAD,CACIJ,GAAIC,OACJQ,GAAI,CAAEa,QAAQ,kBAAoBC,QAAS,GAC3CrB,IAAIC,OAAe,IAAIT,EAAL,IAAiBD,IAHvC,mBASJ,QAAC,IAAD,CAASuB,MAAOA,EAAOP,GAAI,CAAEI,GAAI,CAAC,EAAG,SCnCtC,SAASW,EAAT,GAAiD,IAAjBC,EAAgB,oBAE7CC,EACZD,EADIE,KAAQD,QAGhB,OAAO,QAAC,GAAD,QAAcV,MAAOU,EAAQE,OAAWH,M,iCCZjD,IAJA,SAAwBI,GACtB,OAAOA,EAAMC,QAAQ,SAAd","file":"component---src-templates-tag-query-tsx-96b949abcbe47d781352.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype BlogListItemProps = {\n    post: {\n        slug: string\n        title: string\n        date: string\n        excerpt: string\n        description: string\n        timeToRead?: number\n        tags?: {\n            name: string\n            slug: string\n        }[]\n    }\n    showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => {\n\n  const { postsPrefix, basePath } = useMinimalBlogConfig()\n\n\n    return (\n        <Box mb={4}>\n            <TLink as={Link} to={replaceSlashes(`/${basePath}/${postsPrefix}/${post.slug}`)} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n                {post.title}\n            </TLink>\n            <p sx={{ color: `textMuted`, mt: 1, a: { color: `primary` }, fontSize: [1, 1, 2] }}>\n                <time>{post.date}</time>\n                {post.tags && showTags && (\n                    <React.Fragment>\n                        {` â€” `}\n                        <ItemTags tags={post.tags} />\n                    </React.Fragment>\n                )}\n            </p>\n        </Box>\n    )\n}\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx, Heading, Container, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"@lekoarts/gatsby-theme-emma/src/components/layout\"\nimport SEO from \"@lekoarts/gatsby-theme-emma/src/components/seo\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport Listing from \"./listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagProps = {\n    posts: {\n        slug: string\n        title: string\n        date: string\n        excerpt: string\n        description: string\n        timeToRead?: number\n        tags: {\n            name: string\n            slug: string\n        }[]\n    }[]\n    pageContext: {\n        isCreatedByStatefulCreatePages: boolean\n        slug: string\n        name: string\n        [key: string]: any\n    }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n    const { tagsPath, basePath } = useMinimalBlogConfig()\n\n    return (\n        <Layout>\n            <SEO title={`Tag: ${pageContext.name}`} />\n            <Container>\n\n                <Flex sx={{ alignItems: `center`, justifyContent: `space-between`, flexFlow: `wrap` }}>\n                    <Heading as=\"h1\" variant=\"styles.h1\" sx={{ marginY: 2 }}>\n                        {pageContext.name}\n                    </Heading>\n                    <TLink\n                        as={Link}\n                        sx={{ variant: `links.secondary`, marginY: 2 }}\n                        to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n                    >\n                        View all tags\n                    </TLink>\n                </Flex>\n                \n                <Listing posts={posts} sx={{ mt: [4, 5] }} />\n            </Container>\n        </Layout>\n    )\n}\n\nexport default Tag\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"../components/tag\"\n\ntype Props = {\n  data: {\n    allPost: any\n    [key: string]: any\n  }\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function TagComponentQuery({ ...props }: Props) {\n  const {\n          data: { allPost },\n  } = props\n\n  return <TagComponent posts={allPost.nodes} {...props} />\n}\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n","/**\n * Replace double slashes // with one slash /\n * @description This prevents double slashes as users might add e.g. the basePath as \"/blog\" or \"blog\"\n * @param input\n * @return {string} - Sanitized string\n */\nfunction replaceSlashes(input: string): string {\n  return input.replace(/\\/\\/+/g, `/`)\n}\n\nexport default replaceSlashes\n"],"sourceRoot":""}