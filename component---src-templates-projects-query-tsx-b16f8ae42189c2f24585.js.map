{"version":3,"sources":["webpack://mklabs.github.io/./src/components/project-item.tsx","webpack://mklabs.github.io/./src/components/projects.tsx","webpack://mklabs.github.io/./src/components/projects-page.tsx","webpack://mklabs.github.io/./src/templates/projects-query.tsx","webpack://mklabs.github.io/./src/utils/replaceSlashes.ts"],"names":["node","style","useMinimalBlogConfig","projectsPrefix","basePath","sx","position","content","display","paddingTop","left","height","top","width","a","color","opacity","padding","zIndex","transition","textDecoration","fluid","cover","childImageSharp","Link","aria-label","title","to","replaceSlashes","slug","alt","src","tracedSVG","right","bottom","filter","objectFit","backgroundColor","fontSize","fontWeight","client","service","isBrowser","window","categories","label","href","id","projects","hash","location","slice","defaultCategory","find","category","useState","selected","setSelected","project","toLowerCase","trail","useTrail","length","from","as","variant","textAlign","data-testid","mt","mx","map","key","onClick","e","preventDefault","onCategoryClick","gridTemplateColumns","justifyContent","maxWidth","index","EmmaCoreProjects","props","allProject","data","nodes","input","replace"],"mappings":"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","file":"component---src-templates-projects-query-tsx-b16f8ae42189c2f24585.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport Img from \"gatsby-image\"\nimport { Link } from \"gatsby\"\nimport { animated } from \"react-spring\"\nimport { ChildImageSharp } from \"@lekoarts/gatsby-theme-emma/src/types\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype ProjectItemProps = {\n    node: {\n        color: string\n        title: string\n        slug: string\n        service: string\n        client: string\n        cover: ChildImageSharp\n    }\n    style: any\n}\n\nconst ProjectItem = ({ node, style }: ProjectItemProps) => {\n\n    const { projectsPrefix, basePath } = useMinimalBlogConfig()\n\n    return (\n        <animated.div\n            sx={{\n                position: `relative`,\n                \"&:before\": {\n                    content: `\"\"`,\n                    display: `block`,\n                    paddingTop: `100%`,\n                },\n            }}\n            style={style}\n        >\n            <div\n                sx={{\n                    left: 0,\n                    height: `100%`,\n                    position: `absolute`,\n                    top: 0,\n                    width: `100%`,\n                    a: {\n                        color: `white`,\n                        height: `100%`,\n                        left: 0,\n                        opacity: 0,\n                        padding: 4,\n                        position: `absolute`,\n                        top: 0,\n                        width: `100%`,\n                        zIndex: 10,\n                        transition: `all 0.3s ease-in-out`,\n                        textDecoration: `none`,\n                        \"&:hover\": {\n                            color: `white`,\n                            opacity: 1,\n                            textDecoration: `none`,\n                        },\n                    },\n                }}\n            >\n                <div\n                    sx={{\n                        \"> div\": {\n                            height: `100%`,\n                            left: 0,\n                            position: `absolute !important`,\n                            top: 0,\n                            width: `100%`,\n                            \"> div\": {\n                                position: `static !important`,\n                            },\n                        },\n                    }}\n                >\n                    <Img fluid={node.cover.childImageSharp.fluid} />\n                </div>\n                <Link \n                    aria-label={`View detail page of ${node.title}`}\n                    to={replaceSlashes(`/${basePath}/${projectsPrefix}/${node.slug}`)}\n                >\n                    <img\n                        alt=\"\"\n                        src={node.cover.childImageSharp.fluid.tracedSVG}\n                        sx={{\n                            position: `absolute`,\n                            top: 0,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            width: `100%`,\n                            height: `100%`,\n                            filter: `invert(100%)`,\n                            zIndex: -1,\n                            opacity: 0.08,\n                            objectFit: `cover`,\n                        }}\n                    />\n                    <div\n                        sx={{\n                            backgroundColor: node.color,\n                            height: `100%`,\n                            left: 0,\n                            position: `absolute`,\n                            top: 0,\n                            width: `100%`,\n                            zIndex: -2,\n                        }}\n                    />\n                    <div sx={{ fontSize: 5, fontWeight: `bold` }}>{node.client}</div>\n                    <div sx={{ fontSize: 2 }}>{node.service}</div>\n                </Link>\n            </div>\n        </animated.div>\n    )\n}\n\nexport default ProjectItem\n","/** @jsx jsx */\nimport React, { useState } from \"react\"\nimport { jsx, Heading, Container, Link } from \"theme-ui\"\nimport { ChildImageSharp } from \"@lekoarts/gatsby-theme-emma/src/types\"\nimport { useTrail } from \"react-spring\"\nimport ProjectItem from \"./project-item\"\n\nconst isBrowser = typeof window !== \"undefined\"\n\ntype ProjectsProps = {\n    projects: {\n        color: string\n        slug: string\n        title: string\n        service: string\n        client: string\n        category: string\n        cover: ChildImageSharp\n    }[]\n    [key: string]: any\n}\n\nconst categories = [\n    {\n        label: \"All Categories\",\n        content: \"All\",\n        href: \"/portfolio#all\",\n        id: \"all\"\n    },\n    {\n        label: \"Game Development\",\n        content: \"Game Development\",\n        href: \"/portfolio#gamedev\",\n        id: \"gamedev\"\n    },\n    {\n        label: \"Modding\",\n        content: \"Modding\",\n        href: \"/portfolio#modding\",\n        id: \"modding\"\n    },\n    // {\n    //     label: \"Open Source Software\",\n    //     content: \"OSS\",\n    //     href: \"/portfolio#oss\",\n    //     id: \"oss\"\n    // }\n]\n\nconst Projects = ({ projects }: ProjectsProps) => {\n    const hash = isBrowser ? location.hash.slice(1) : \"\"\n    const defaultCategory = categories.find(category => hash === category.id)\n    const [selected, setSelected] = useState(defaultCategory ? defaultCategory.id : \"gamedev\");\n\n    if (selected !== \"all\") {\n        projects = projects.filter(project => project.category.toLowerCase() === selected)\n    }\n\n    const trail = useTrail(projects.length, {\n        from: { height: `0%` },\n        to: { height: `100%` },\n    })\n\n    const onCategoryClick = (e, id) => {\n        setSelected(id)\n        location.hash = id\n        e.preventDefault()\n    }\n\n    return (\n        <React.Fragment>\n            <Container>\n                <Heading as=\"h2\" variant=\"styles.h2\" sx={{ textAlign: 'center' }}>\n                    Projects\n                </Heading>\n\n                <div data-testid=\"projects-categories\" sx={{ mt: 4, a: { mx: 2 }, textAlign: 'center' }}>\n                    {categories.map((category) => (\n                        <Link\n                            key={category.id}\n                            aria-label={category.label}\n                            title={category.label}\n                            href={category.href}\n                            onClick={(e) => onCategoryClick(e, category.id)}\n                            sx={{ \n                                color: \"primary\",\n                                fontWeight: category.id === selected ? 700 : \"normal\"\n                            }}\n                        >\n                            {category.content}\n                        </Link>\n                    ))}\n                </div>\n            </Container>\n\n            <Container\n                sx={{\n                    display: `grid`,\n                    gridTemplateColumns: `repeat(auto-fit, minmax(280px, 20%))`,\n                    justifyContent: `center`,\n                    width: `100%`,\n                    maxWidth: `100%`,\n                    padding: `2rem 0`\n\n                }}\n            >\n                {trail.map((style, index) => (\n                    <ProjectItem style={style} node={projects[index]} key={projects[index].slug} />\n                ))}\n            </Container>\n        </React.Fragment>\n    )\n}\n\nexport default Projects","/** @jsx jsx */\nimport { jsx, Container, Styled } from \"theme-ui\"\nimport { useTrail } from \"react-spring\"\nimport Layout from \"@lekoarts/gatsby-theme-emma/src/components/layout\"\nimport { ChildImageSharp } from \"@lekoarts/gatsby-theme-emma/src/types\"\nimport SEO from \"@lekoarts/gatsby-theme-emma/src/components/seo\"\nimport Projects from \"./projects\"\n\ntype ProjectsProps = {\n    projects: {\n        color: string\n        slug: string\n        title: string\n        service: string\n        client: string\n        category: string\n        cover: ChildImageSharp\n    }[]\n    [key: string]: any\n}\n\nconst ProjectsPage = ({ projects }: ProjectsProps) => {\n    return (\n        <Layout\n            sx={{\n            }}\n        >\n            <SEO title=\"Portfolio\" />\n\n            <Projects projects={projects}/>\n        </Layout>\n    )\n}\n\nexport default ProjectsPage","import { graphql } from \"gatsby\"\nimport ProjectsComponent from \"../components/projects-page\"\n\nexport default function EmmaCoreProjects({ ...props }: Props) {\n    const {\n            data: { allProject },\n    } = props\n\n    return <ProjectsComponent projects={allProject.nodes} {...props} />\n}\n\nexport const query = graphql`\n  query {\n    allProject: allPortfolioProject(sort: {fields: [order, date], order: [ASC, DESC]}) {\n      nodes {\n        color\n        slug\n        service\n        client\n        title\n        category\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 850, quality: 90, traceSVG: { color: \"#e6e6e6\" }) {\n              ...GatsbyImageSharpFluid_withWebp_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`","/**\n * Replace double slashes // with one slash /\n * @description This prevents double slashes as users might add e.g. the basePath as \"/blog\" or \"blog\"\n * @param input\n * @return {string} - Sanitized string\n */\nfunction replaceSlashes(input: string): string {\n  return input.replace(/\\/\\/+/g, `/`)\n}\n\nexport default replaceSlashes\n"],"sourceRoot":""}